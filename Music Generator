import os
import glob
import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.models import Sequential
from music21 import converter, instrument, note, chord, stream
from pydub import AudioSegment
from pydub.playback import play

# Google Colab'da pydub kütüphanesini yükleme
!pip install pydub

from pydub.playback import play
from pydub.utils import which
from pydub.generators import Sine

# MP3 dosyasını yükleyerek MIDI dosyasına dönüştürme
def mp3_to_midi(mp3_file):
    # MP3 dosyasını yükleme
    audio = AudioSegment.from_file(mp3_file)
    # MP3 dosyasını MIDI formatına dönüştürme
    midi_data = audio.export("temp.wav", format="wav").export("temp.mid", format="midi")
    return "temp.mid"

# MP3 dosyasının bulunduğu yol
mp3_file = r'C:\Users\gkhnc\Desktop\List\your_mp3_file.mp3'

# MP3 dosyasını MIDI dosyasına dönüştürme
midi_file = mp3_to_midi(mp3_file)

# MIDI dosyasını yükleme
midi = converter.parse(midi_file)

# MIDI dosyasını nota ve akor dizilerine dönüştürme
def parse_midi_file(midi):
    notes = []
    parts = instrument.partitionByInstrument(midi)
    if parts:
        notes_to_parse = parts.parts[0].recurse()
    else:
        notes_to_parse = midi.flat.notes
    for element in notes_to_parse:
        if isinstance(element, note.Note):
            notes.append(str(element.pitch))
        elif isinstance(element, chord.Chord):
            notes.append('.'.join(str(n) for n in element.normalOrder))
    return notes

# MIDI dosyasını nota/akor dizilerine dönüştürme
notes = parse_midi_file(midi)

# Tüm benzersiz notaları alma
pitch_names = sorted(set(item for item in notes))
n_vocab = len(pitch_names)

# Notaları sayı dizisine dönüştürme ve dizileri hazırlama
note_to_int = dict((note, number) for number, note in enumerate(pitch_names))
sequence_length = 100
network_input = []
network_output = []
for i in range(0, len(notes) - sequence_length, 1):
    sequence_in = notes[i:i + sequence_length]
    sequence_out = notes[i + sequence_length]
    network_input.append([note_to_int[char] for char in sequence_in])
    network_output.append(note_to_int[sequence_out])
n_patterns = len(network_input)

# Veriyi yeniden şekillendirme
network_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
network_input = network_input / float(n_vocab)
network_output = tf.keras.utils.to_categorical(network_output)

# Modeli oluşturma
model = Sequential()
model.add(LSTM(256, input_shape=(network_input.shape[1], network_input.shape[2]), return_sequences=True))
model.add(LSTM(256))
model.add(Dense(n_vocab, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='rmsprop')

# Modeli eğitme
model.fit(network_input, network_output, epochs=50, batch_size=64)

# Yeni bir müzik parçası oluşturma
start = np.random.randint(0, len(network_input)-1)
int_to_note = dict((number, note) for number, note in enumerate(pitch_names))
pattern = network_input[start]
prediction_output = []
for note_index in range(500):
    prediction_input = np.reshape(pattern, (1, len(pattern), 1))
    prediction_input = prediction_input / float(n_vocab)
    prediction = model.predict(prediction_input, verbose=0)
    index = np.argmax(prediction)
    result = int_to_note[index]
    prediction_output.append(result)
    pattern = np.append(pattern, index)
    pattern = pattern[1:len(pattern)]

# Oluşturulan müzik parçasını MIDI dosyası olarak kaydetme
offset = 0
output_notes = []
for pattern in prediction_output:
    if ('.' in pattern) or pattern.isdigit():
        notes_in_chord = pattern.split('.')
        notes = []
        for current_note in notes_in_chord:
            new_note = note.Note(int(current_note))
            new_note.storedInstrument = instrument.Piano()
            notes.append(new_note)
        new_chord = chord.Chord(notes)
        new_chord.offset = offset
        output_notes.append(new_chord)
    else:
        new_note = note.Note(pattern)
        new_note.offset = offset
        new_note.storedInstrument = instrument.Piano()
        output_notes.append(new_note)
    offset += 0.5

midi_stream = stream.Stream(output_notes)
midi_stream.write('midi', fp='/content/generated_music.mid')

# Oluşturulan MIDI dosyasını .mp3 formatına dönüştürme
sound = AudioSegment.from_file("/content/generated_music.mid", format="mid")
sound.export("/content/generated_music.mp3", format="mp3")
